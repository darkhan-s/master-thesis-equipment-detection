cfg.dataloader.evaluator = (
    detectron2._cfg_loaderdbb9.evaluator.py.VOCDetectionEvaluator(
        dataset_name="tless_rendered_test"
    )
)
cfg.dataloader.test = detectron2.data.build_detection_test_loader(
    dataset=detectron2.data.get_detection_dataset_dicts(
        filter_empty=False, names="tless_rendered_test"
    ),
    mapper=detectron2.data.DatasetMapper(
        augmentations=[
            detectron2.data.transforms.ResizeShortestEdge(
                max_size=1333, short_edge_length=800
            )
        ],
        image_format="BGR",
        is_train=False,
    ),
    num_workers=4,
)
cfg.dataloader.train = detectron2.data.build_detection_train_loader(
    dataset=detectron2.data.get_detection_dataset_dicts(
        names="tless_rendered_trainval"
    ),
    mapper=detectron2.data.DatasetMapper(
        augmentations=[
            detectron2.data.transforms.ResizeShortestEdge(
                max_size=1333,
                sample_style="choice",
                short_edge_length=[640, 672, 704, 736, 768, 800],
            ),
            detectron2.data.transforms.RandomFlip(horizontal=True),
        ],
        image_format="BGR",
        is_train=True,
        use_instance_mask=False,
    ),
    num_workers=4,
    total_batch_size=16,
)
cfg.lr_multiplier = detectron2.solver.WarmupParamScheduler(
    scheduler=fvcore.common.param_scheduler.MultiStepParamScheduler(
        milestones=[60000, 80000, 90000], values=[1.0, 0.1, 0.01]
    ),
    warmup_factor=0.001,
    warmup_length=0.011111111111111112,
    warmup_method="linear",
)
cfg.model = detectron2.modeling.meta_arch.fcos.FCOS(
    backbone=detectron2.modeling.FPN(
        bottom_up=detectron2.modeling.ResNet(
            freeze_at=2,
            out_features=["res3", "res4", "res5"],
            stages=detectron2.modeling.ResNet.make_default_stages(
                depth=50, norm="FrozenBN", stride_in_1x1=True
            ),
            stem=detectron2.modeling.backbone.BasicStem(
                in_channels=3, norm="FrozenBN", out_channels=64
            ),
        ),
        in_features=["res3", "res4", "res5"],
        out_channels=256,
        top_block=detectron2.modeling.backbone.fpn.LastLevelP6P7(
            in_channels=256, in_feature="p5", out_channels=256
        ),
    ),
    focal_loss_alpha=0.25,
    focal_loss_gamma=2.0,
    head=detectron2.modeling.meta_arch.fcos.FCOSHead(
        conv_dims=[256, 256, 256, 256],
        input_shape=[
            ShapeSpec(channels=256, height=None, width=None, stride=None),
            ShapeSpec(channels=256, height=None, width=None, stride=None),
            ShapeSpec(channels=256, height=None, width=None, stride=None),
            ShapeSpec(channels=256, height=None, width=None, stride=None),
            ShapeSpec(channels=256, height=None, width=None, stride=None),
        ],
        norm="GN",
        num_classes=80,
        prior_prob=0.01,
    ),
    head_in_features=["p3", "p4", "p5", "p6", "p7"],
    num_classes=80,
    pixel_mean=[103.53, 116.28, 123.675],
    pixel_std=[1.0, 1.0, 1.0],
    test_nms_thresh=0.6,
    test_score_thresh=0.2,
)
cfg.optimizer = torch.optim.SGD(
    lr=0.01,
    momentum=0.9,
    params=detectron2.solver.get_default_optimizer_params(weight_decay_norm=0.0),
    weight_decay=0.0001,
)
cfg.semisupnet.bbox_threshold = 0.7
cfg.semisupnet.burn_up_step = 12000
cfg.semisupnet.dis_loss_weight = 0.1
cfg.semisupnet.dis_type = "res4"
cfg.semisupnet.loss_weight_type = "standard"
cfg.semisupnet.mlp_dim = 128
cfg.semisupnet.pseudo_bbox_sample = "thresholding"
cfg.semisupnet.teacher_update_iter = 1
cfg.semisupnet.trainer = "ateacher"
cfg.semisupnet.unsup_loss_weight = 0.5
cfg.train.amp.enabled = False
cfg.train.checkpointer.max_to_keep = 100
cfg.train.checkpointer.period = 5000
cfg.train.ddp.broadcast_buffers = False
cfg.train.ddp.find_unused_parameters = False
cfg.train.ddp.fp16_compression = False
cfg.train.device = "cuda"
cfg.train.eval_period = 5000
cfg.train.init_checkpoint = "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
cfg.train.log_period = 20
cfg.train.max_iter = 90000
cfg.train.output_dir = "./output"

